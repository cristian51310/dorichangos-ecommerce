// ***********************************************************************
// ****                             Options                           ****
// ***********************************************************************

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ***********************************************************************
// ****                             Models                            ****
// ***********************************************************************

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  role           Role          @default(CUSTOMER)
  accounts       Account[]
  orders         Order[]
  reservations   Reservation[]
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  stock       Int
  sizes       Size[]
  categoryIDs String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIDs], references: [id])
}

type Size {
  name  String
  price Float
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  image       String
  productsIDs String[]  @db.ObjectId
  products    Product[] @relation(fields: [productsIDs], references: [id])
}

model Order {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  userId          String            @db.ObjectId
  amount          Float
  currency        String
  status          String
  deliveryStatus  String?
  createDate      DateTime          @default(now())
  paymentIntentId String            @unique
  products        CartProductType[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reservation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  amount          Float
  currency        String
  createDate      DateTime @default(now())
  paymentIntentId String   @unique
  reservationDate DateTime
  reservationHour String
  quantity        Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Banner {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  image String
}

model MuseumDate {
  id    String       @id @default(auto()) @map("_id") @db.ObjectId
  date  DateTime
  hours MuseumHour[]
}

model MuseumHour {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  hour         String
  available    Int        @default(5)
  price        Float      @default(3500)
  museumDateId String     @db.ObjectId
  museumDate   MuseumDate @relation(fields: [museumDateId], references: [id])
}

type CartProductType {
  id        String
  productId String
  name      String
  image     String
  stock     Int
  quantity  Int
  size      String
  price     Float
}

enum Role {
  ADMIN
  EMPLOYEE
  CUSTOMER
}
